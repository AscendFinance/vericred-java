/*
 * Vericred API
 * Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,staes.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
<cost-share>     ::= <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> <tier-limit> "/" <tier> <opt-num-prefix> <value> <opt-per-unit> <deductible> "|" <benefit-limit>
<tier>           ::= "In-Network:" | "In-Network-Tier-2:" | "Out-of-Network:"
<opt-num-prefix> ::= "first" <num> <unit> | ""
<unit>           ::= "day(s)" | "visit(s)" | "exam(s)" | "item(s)"
<value>          ::= <ddct_moop> | <copay> | <coinsurance> | <compound> | "unknown" | "Not Applicable"
<compound>       ::= <copay> <deductible> "then" <coinsurance> <deductible> | <copay> <deductible> "then" <copay> <deductible> | <coinsurance> <deductible> "then" <coinsurance> <deductible>
<copay>          ::= "$" <num>
<coinsurace>     ::= <num> "%"
<ddct_moop>      ::= <copay> | "Included in Medical" | "Unlimited"
<opt-per-unit>   ::= "per day" | "per visit" | "per stay" | ""
<deductible>     ::= "before deductible" | "after deductible" | ""
<tier-limit>     ::= ", " <limit> | ""
<benefit-limit>  ::= <limit> | ""
```


 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;

import java.io.Serializable;
/**
 * Pricing
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-01-26T16:00:18.173-05:00")
public class Pricing  implements Serializable {
  @JsonProperty("age")
  private Integer age = null;

  @JsonProperty("effective_date")
  private LocalDate effectiveDate = null;

  @JsonProperty("expiration_date")
  private LocalDate expirationDate = null;

  @JsonProperty("plan_id")
  private Integer planId = null;

  @JsonProperty("premium_child_only")
  private BigDecimal premiumChildOnly = null;

  @JsonProperty("premium_family")
  private BigDecimal premiumFamily = null;

  @JsonProperty("premium_single")
  private BigDecimal premiumSingle = null;

  @JsonProperty("premium_single_and_children")
  private BigDecimal premiumSingleAndChildren = null;

  @JsonProperty("premium_single_and_spouse")
  private BigDecimal premiumSingleAndSpouse = null;

  @JsonProperty("premium_single_smoker")
  private BigDecimal premiumSingleSmoker = null;

  @JsonProperty("rating_area_id")
  private String ratingAreaId = null;

  @JsonProperty("premium_source")
  private String premiumSource = null;

  @JsonProperty("updated_at")
  private String updatedAt = null;

  public Pricing age(Integer age) {
    this.age = age;
    return this;
  }

   /**
   * Age of applicant
   * @return age
  **/
  @ApiModelProperty(example = "null", value = "Age of applicant")
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }

  public Pricing effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Effective date of plan
   * @return effectiveDate
  **/
  @ApiModelProperty(example = "null", value = "Effective date of plan")
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }

  public Pricing expirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Plan expiration date
   * @return expirationDate
  **/
  @ApiModelProperty(example = "null", value = "Plan expiration date")
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }

  public Pricing planId(Integer planId) {
    this.planId = planId;
    return this;
  }

   /**
   * Foreign key to plans
   * @return planId
  **/
  @ApiModelProperty(example = "null", value = "Foreign key to plans")
  public Integer getPlanId() {
    return planId;
  }

  public void setPlanId(Integer planId) {
    this.planId = planId;
  }

  public Pricing premiumChildOnly(BigDecimal premiumChildOnly) {
    this.premiumChildOnly = premiumChildOnly;
    return this;
  }

   /**
   * Child-only premium
   * @return premiumChildOnly
  **/
  @ApiModelProperty(example = "null", value = "Child-only premium")
  public BigDecimal getPremiumChildOnly() {
    return premiumChildOnly;
  }

  public void setPremiumChildOnly(BigDecimal premiumChildOnly) {
    this.premiumChildOnly = premiumChildOnly;
  }

  public Pricing premiumFamily(BigDecimal premiumFamily) {
    this.premiumFamily = premiumFamily;
    return this;
  }

   /**
   * Family premium
   * @return premiumFamily
  **/
  @ApiModelProperty(example = "null", value = "Family premium")
  public BigDecimal getPremiumFamily() {
    return premiumFamily;
  }

  public void setPremiumFamily(BigDecimal premiumFamily) {
    this.premiumFamily = premiumFamily;
  }

  public Pricing premiumSingle(BigDecimal premiumSingle) {
    this.premiumSingle = premiumSingle;
    return this;
  }

   /**
   * Single-person premium
   * @return premiumSingle
  **/
  @ApiModelProperty(example = "null", value = "Single-person premium")
  public BigDecimal getPremiumSingle() {
    return premiumSingle;
  }

  public void setPremiumSingle(BigDecimal premiumSingle) {
    this.premiumSingle = premiumSingle;
  }

  public Pricing premiumSingleAndChildren(BigDecimal premiumSingleAndChildren) {
    this.premiumSingleAndChildren = premiumSingleAndChildren;
    return this;
  }

   /**
   * Single person including children premium
   * @return premiumSingleAndChildren
  **/
  @ApiModelProperty(example = "null", value = "Single person including children premium")
  public BigDecimal getPremiumSingleAndChildren() {
    return premiumSingleAndChildren;
  }

  public void setPremiumSingleAndChildren(BigDecimal premiumSingleAndChildren) {
    this.premiumSingleAndChildren = premiumSingleAndChildren;
  }

  public Pricing premiumSingleAndSpouse(BigDecimal premiumSingleAndSpouse) {
    this.premiumSingleAndSpouse = premiumSingleAndSpouse;
    return this;
  }

   /**
   * Person with spouse premium
   * @return premiumSingleAndSpouse
  **/
  @ApiModelProperty(example = "null", value = "Person with spouse premium")
  public BigDecimal getPremiumSingleAndSpouse() {
    return premiumSingleAndSpouse;
  }

  public void setPremiumSingleAndSpouse(BigDecimal premiumSingleAndSpouse) {
    this.premiumSingleAndSpouse = premiumSingleAndSpouse;
  }

  public Pricing premiumSingleSmoker(BigDecimal premiumSingleSmoker) {
    this.premiumSingleSmoker = premiumSingleSmoker;
    return this;
  }

   /**
   * Premium for single smoker
   * @return premiumSingleSmoker
  **/
  @ApiModelProperty(example = "null", value = "Premium for single smoker")
  public BigDecimal getPremiumSingleSmoker() {
    return premiumSingleSmoker;
  }

  public void setPremiumSingleSmoker(BigDecimal premiumSingleSmoker) {
    this.premiumSingleSmoker = premiumSingleSmoker;
  }

  public Pricing ratingAreaId(String ratingAreaId) {
    this.ratingAreaId = ratingAreaId;
    return this;
  }

   /**
   * Foreign key to rating areas
   * @return ratingAreaId
  **/
  @ApiModelProperty(example = "null", value = "Foreign key to rating areas")
  public String getRatingAreaId() {
    return ratingAreaId;
  }

  public void setRatingAreaId(String ratingAreaId) {
    this.ratingAreaId = ratingAreaId;
  }

  public Pricing premiumSource(String premiumSource) {
    this.premiumSource = premiumSource;
    return this;
  }

   /**
   * Where was this pricing data extracted from?
   * @return premiumSource
  **/
  @ApiModelProperty(example = "null", value = "Where was this pricing data extracted from?")
  public String getPremiumSource() {
    return premiumSource;
  }

  public void setPremiumSource(String premiumSource) {
    this.premiumSource = premiumSource;
  }

  public Pricing updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Time when pricing was last updated
   * @return updatedAt
  **/
  @ApiModelProperty(example = "null", value = "Time when pricing was last updated")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pricing pricing = (Pricing) o;
    return Objects.equals(this.age, pricing.age) &&
        Objects.equals(this.effectiveDate, pricing.effectiveDate) &&
        Objects.equals(this.expirationDate, pricing.expirationDate) &&
        Objects.equals(this.planId, pricing.planId) &&
        Objects.equals(this.premiumChildOnly, pricing.premiumChildOnly) &&
        Objects.equals(this.premiumFamily, pricing.premiumFamily) &&
        Objects.equals(this.premiumSingle, pricing.premiumSingle) &&
        Objects.equals(this.premiumSingleAndChildren, pricing.premiumSingleAndChildren) &&
        Objects.equals(this.premiumSingleAndSpouse, pricing.premiumSingleAndSpouse) &&
        Objects.equals(this.premiumSingleSmoker, pricing.premiumSingleSmoker) &&
        Objects.equals(this.ratingAreaId, pricing.ratingAreaId) &&
        Objects.equals(this.premiumSource, pricing.premiumSource) &&
        Objects.equals(this.updatedAt, pricing.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, effectiveDate, expirationDate, planId, premiumChildOnly, premiumFamily, premiumSingle, premiumSingleAndChildren, premiumSingleAndSpouse, premiumSingleSmoker, ratingAreaId, premiumSource, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pricing {\n");
    
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    planId: ").append(toIndentedString(planId)).append("\n");
    sb.append("    premiumChildOnly: ").append(toIndentedString(premiumChildOnly)).append("\n");
    sb.append("    premiumFamily: ").append(toIndentedString(premiumFamily)).append("\n");
    sb.append("    premiumSingle: ").append(toIndentedString(premiumSingle)).append("\n");
    sb.append("    premiumSingleAndChildren: ").append(toIndentedString(premiumSingleAndChildren)).append("\n");
    sb.append("    premiumSingleAndSpouse: ").append(toIndentedString(premiumSingleAndSpouse)).append("\n");
    sb.append("    premiumSingleSmoker: ").append(toIndentedString(premiumSingleSmoker)).append("\n");
    sb.append("    ratingAreaId: ").append(toIndentedString(ratingAreaId)).append("\n");
    sb.append("    premiumSource: ").append(toIndentedString(premiumSource)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

